/*

insert license info here

*/

using System;
using System.Collections;
using System.Collections.Generic;


namespace Iridescent.Entities
{
	/// <summary>
	/// Generated by MyGeneration using the NHibernate Object Mapping 1.3.1 by Grimaldi Giuseppe (giuseppe.grimaldi@infracom.it)
	/// </summary>
	[Serializable]
	public class Diary : DomainObject 
	{
		#region Private Members
		
		// Variabili di stato
		private bool _isChanged;
		private bool _isDeleted;

		// Primary Key(s) 
		private int _id; 
		
		// Properties 
		private int _categoryid; 
		private string _title; 
		private string _keywords; 
		private string _details; 
		private DateTime _createdate; 
		private DateTime _lastupdatetime; 
		private bool _isopen; 
		private int _viewcount; 		

		#endregion
		
		#region Default ( Empty ) Class Constructor
		
		/// <summary>
		/// default constructor
		/// </summary>
		public Diary()
		{
			_id = 0; 
			_categoryid = 0; 
			_title = null; 
			_keywords = null; 
			_details = null; 
			_createdate = DateTime.MinValue; 
			_lastupdatetime = DateTime.MinValue; 
			_isopen = false; 
			_viewcount = 0; 
		}
		
		#endregion // End of Default ( Empty ) Class Constructor
		
		#region Full Constructor
		
		/// <summary>
		/// full constructor
		/// </summary>
		public Diary(int id, int categoryid, string title, string keywords, string details, DateTime createdate, DateTime lastupdatetime, bool isopen, int viewcount)
		{
			_id = id; 
			_categoryid = categoryid; 
			_title = title; 
			_keywords = keywords; 
			_details = details; 
			_createdate = createdate; 
			_lastupdatetime = lastupdatetime; 
			_isopen = isopen; 
			_viewcount = viewcount; 
		}
		
		#endregion // End Full Constructor

		#region Public Properties
			
		/// <summary>
		/// 
		/// </summary>		
		public virtual int Id
		{
			get { return _id; }
			set { _isChanged |= (_id != value); _id = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual int CategoryId
		{
			get { return _categoryid; }
			set { _isChanged |= (_categoryid != value); _categoryid = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Title
		{
			get { return _title; }
			set	
			{
				if ( value != null )
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for Title", value, value.ToString());
				
				_isChanged |= (_title != value); _title = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Keywords
		{
			get { return _keywords; }
			set	
			{
				if ( value != null )
					if( value.Length > 100)
						throw new ArgumentOutOfRangeException("Invalid value for Keywords", value, value.ToString());
				
				_isChanged |= (_keywords != value); _keywords = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual string Details
		{
			get { return _details; }
			set	
			{
				if ( value != null )
					if( value.Length > 1073741823)
						throw new ArgumentOutOfRangeException("Invalid value for Details", value, value.ToString());
				
				_isChanged |= (_details != value); _details = value;
			}
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual DateTime CreateDate
		{
			get { return _createdate; }
			set { _isChanged |= (_createdate != value); _createdate = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual DateTime LastUpdateTime
		{
			get { return _lastupdatetime; }
			set { _isChanged |= (_lastupdatetime != value); _lastupdatetime = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual bool IsOpen
		{
			get { return _isopen; }
			set { _isChanged |= (_isopen != value); _isopen = value; }
		} 
	  
		/// <summary>
		/// 
		/// </summary>		
		public virtual int ViewCount
		{
			get { return _viewcount; }
			set { _isChanged |= (_viewcount != value); _viewcount = value; }
		} 
	  
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsChanged
		{
			get { return _isChanged; }
		}
		
		/// <summary>
		/// Returns whether or not the object has changed it's values.
		/// </summary>
		public virtual bool IsDeleted
		{
			get { return _isDeleted; }
		}
		
		#endregion 
		
		#region Public Functions

		/// <summary>
		/// mark the item as deleted
		/// </summary>
		public virtual void MarkAsDeleted()
		{
			_isDeleted = true;
			_isChanged = true;
		}
		
		#endregion
		
		
	}
}